#Docker 컨테이너를 정의하고 관리하기 위해 구성 파일
#여러 컨테이너와 한 곳에 정리 할 수 있게 해줌
#파일 버전
version: '3.8'

services:
  # MySQL 데이터베이스
  db:
    image: mysql:latest
    container_name: db
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    # 한글 설정
    command: 
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_general_ci
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:      
      - "6379:6379"
    networks:
      - app-network

  redis_insight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    ports:
      - "5540:5540"
    depends_on:
      - redis
    networks:
      - app-network

  mongo:
    container_name: mongo
    image: mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - app-network
    volumes:
      - mongodb:/data/db
    command: ["mongod", "--auth"]
    hostname: mongo

  mongo_express:
    image: mongo-express:latest
    container_name: mongo_insight
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
    networks:
      - app-network
    hostname: mongo-express

  node:
    container_name: node
    image: jungeunyoon/teama-backend:1.0.86
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - MYSQL_HOST=db
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GCLOUD_STORAGE_BUCKET=${GCLOUD_STORAGE_BUCKET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLOVA_API_KEY=${CLOVA_API_KEY}
      - CLOVA_CLIENT_ID=${CLOVA_CLIENT_ID}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - NODE_ENV=${NODE_ENV}
      - TZ=${TZ}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - GCP_TYPE=${GCP_TYPE}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_PRIVATE_KEY_ID=${GCP_PRIVATE_KEY_ID}
      - GCP_PRIVATE_KEY=${GCP_PRIVATE_KEY}
      - GCP_CLIENT_EMAIL=${GCP_CLIENT_EMAIL}
      - GCP_AUTH_URI=${GCP_AUTH_URI}
      - GCP_TOKEN_URI=${GCP_TOKEN_URI}
      - GCP_AUTH_PROVIDER_X509_CERT_URL=${GCP_AUTH_PROVIDER_X509_CERT_URL}
      - GCP_CLIENT_X509_CERT_URL=${GCP_CLIENT_X509_CERT_URL}
      - GCP_UNIVERSE_DOMAIN=${GCP_UNIVERSE_DOMAIN}
      - MONGODB_DOCKER_URL=${MONGODB_DOCKER_URL}
    ports:
      - '8000:8000'
    depends_on:
      - db
      - redis
      - mongo
    command: npm start # 컨테이너가 시작될 때 실행할 명령
    networks:
      - app-network
    
  prometheus:
    image: prom/prometheus:v2.45.6
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network
  
  grafana:
    image: grafana/grafana:9.5.20
    container_name: grafana
    volumes:
      - grafana_provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - app-network
  
  mysql-exporter:
    image: prom/mysqld-exporter:main
    container_name: mysql-exporter
    ports:
      - "9104:9104" 
    volumes:
      - ./monitoring/mysql-exporter/my-config.conf:/cfg/my-config.conf
    environment:
      - DATA_SOURCE_NAME='root:1234@(db:3306)/mydatabase' 
      - collect.info_schema.tablestats=true
      - collect.info_schema.userstats=true
      - collect.info_schema.query_response_time=true
      - collect.auto_increment.columns=true
      - collect.binlog_size=true
      - collect.perf_schema.eventsstatements=true
      - collect.perf_schema.eventswaits=true
      - collect.perf_schema.file_events=true
      - collect.perf_schema.indexiowaits=true
      - collect.perf_schema.tableiowaits=true
      - collect.perf_schema.tablelocks=true
    networks:
      - app-network
    depends_on:
      - db 
    command:
      - '--config.my-cnf=/cfg/my-config.conf' 
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1 #이미지
    container_name: cadvisor
    ports:
      - "8080:8080" 
    volumes:
      - /:/rootfs:ro #읽기 전용 데이터 - 루트 파일 시스템
      - /var/run:/var/run:rw #읽기 & 쓰기 - 런타임 데이터
      - /sys:/sys:ro  #읽기 전용 데이터 - 커널, 하드웨어, 드라이버 정보 등등
      - /var/lib/docker/:/var/lib/docker:ro #읽기 전용 데이터 - 도커 정보 데이터
    networks:
      - app-network 

  node_exporter: 
    image: quay.io/prometheus/node-exporter:v1.8.1 
    container_name: node_exporter
    ports:
      - "9100:9100" 
    command:
      - '--path.rootfs=/host' 
    restart: unless-stopped 
    volumes:
      - '/:/host:ro,rslave' 
    networks:
      - app-network 

  front:
    image: jungeunyoon/team-a-frontend:1.0.82
    container_name: front
    ports:
      - "3000:3000"
    command: yarn dev
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  grafana_provisioning:
  grafana_data:
  prometheus_data:
  db_data:
  mongodb: